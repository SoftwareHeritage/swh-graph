# Copyright (c) 2025 The Software Heritage developers
# See the AUTHORS file at the top-level directory of this distribution
# License: GNU General Public License version 3, or any later version
# See top-level LICENSE file for more information

from pathlib import Path

import pytest

from swh.graph.example_dataset import DATASET_DIR

# locally "redefine" all fixtures that depend on the session-scoped
# graph_grpc_server_config, because we need pytest to call them again.
from swh.graph.pytest_plugin import (  # noqa
    graph_grpc_server_process,
    graph_grpc_server_started,
)

from .test_getnode import *  # noqa
from .test_grpc import *  # noqa

# semi-manually generated using:
# 1. swh-graph-convert from swh/graph/example_dataset/compressed/graph to GraphBuilder syntax
# 2. use the generated GraphBuilder code to build a graph, then serialize it with serde
# 3. dump here (slightly pretty-printed for "readability")
#
# Ideally this should be auto-generated instead, see below
GRAPH_JSON = """
{
    "swhids":["swh:1:ori:8f50d3f60eae370ddbf85c86219c55108a350165","swh:1:snp:0000000000000000000000000000000000000022","swh:1:ori:83404f995118bd25774f4ac14422a8f175e7a054","swh:1:rev:0000000000000000000000000000000000000009","swh:1:rel:0000000000000000000000000000000000000010","swh:1:snp:0000000000000000000000000000000000000020","swh:1:rev:0000000000000000000000000000000000000003","swh:1:dir:0000000000000000000000000000000000000002","swh:1:cnt:0000000000000000000000000000000000000005","swh:1:dir:0000000000000000000000000000000000000006","swh:1:cnt:0000000000000000000000000000000000000004","swh:1:cnt:0000000000000000000000000000000000000001","swh:1:dir:0000000000000000000000000000000000000008","swh:1:cnt:0000000000000000000000000000000000000007","swh:1:dir:0000000000000000000000000000000000000012","swh:1:cnt:0000000000000000000000000000000000000011","swh:1:rev:0000000000000000000000000000000000000013","swh:1:dir:0000000000000000000000000000000000000016","swh:1:cnt:0000000000000000000000000000000000000015","swh:1:rel:0000000000000000000000000000000000000021","swh:1:rev:0000000000000000000000000000000000000018","swh:1:rel:0000000000000000000000000000000000000019","swh:1:dir:0000000000000000000000000000000000000017","swh:1:cnt:0000000000000000000000000000000000000014"],
    "contents":{
        "is_skipped_content":[262144],
        "content_length":[18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,1337,18446744073709551615,404,42,18446744073709551615,666,18446744073709551615,313,18446744073709551615,18446744073709551615,404,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,14]
    },
    "label_names":{
        "label_names":[[85,107,86,66,82,69,49,70,76,109,49,107],[86,69,57,69,84,121,53,48,101,72,81,61],[98,50,120,107],[98,50,120,107,99,72,74,118,97,109,86,106,100,65,61,61],[99,71,70,121,99,50,86,121,76,109,77,61],[99,109,86,109,99,121,57,111,90,87,70,107,99,121,57,116,89,88,78,48,90,88,73,61],[99,109,86,109,99,121,57,48,89,87,100,122,76,51,89,120,76,106,65,61],[99,109,86,109,99,121,57,48,89,87,100,122,76,51,89,121,76,106,65,116,89,87,53,118,98,110,108,116,98,51,86,122],[100,71,86,122,100,72,77,61]]
    },
    "persons":{"author_id":[4294967295,4294967295,4294967295,0,1,4294967295,1,4294967295,4294967295,4294967295,4294967295,4294967295,4294967295,4294967295,4294967295,4294967295,1,4294967295,4294967295,4294967295,2,0,4294967295,4294967295],"committer_id":[4294967295,4294967295,4294967295,0,4294967295,4294967295,1,4294967295,4294967295,4294967295,4294967295,4294967295,4294967295,4294967295,4294967295,4294967295,0,4294967295,4294967295,4294967295,1,4294967295,4294967295,4294967295]},"strings":{
        "message":[97,72,82,48,99,72,77,54,76,121,57,108,101,71,70,116,99,71,120,108,76,109,78,118,98,83,57,122,100,50,103,118,90,51,74,104,99,71,103,121,10,97,72,82,48,99,72,77,54,76,121,57,108,101,71,70,116,99,71,120,108,76,109,78,118,98,83,57,122,100,50,103,118,90,51,74,104,99,71,103,61,10,81,87,82,107,73,72,66,104,99,110,78,108,99,103,61,61,10,86,109,86,121,99,50,108,118,98,105,65,120,76,106,65,61,10,83,87,53,112,100,71,108,104,98,67,66,106,98,50,49,116,97,88,81,61,10,81,87,82,107,73,72,82,108,99,51,82,122,10,86,109,86,121,99,50,108,118,98,105,65,121,76,106,65,103,89,110,86,48,73,72,100,112,100,71,103,103,98,109,56,103,89,88,86,48,97,71,57,121,10,85,109,86,109,89,87,78,48,98,51,73,103,89,50,57,107,90,87,74,104,99,50,85,61,10,86,109,86,121,99,50,108,118,98,105,65,121,76,106,65,61,10],
        "message_offset":[0,18446744073709551615,41,82,99,18446744073709551615,116,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,137,18446744073709551615,18446744073709551615,150,191,216,18446744073709551615,18446744073709551615],"tag_name":[100,106,69,117,77,65,61,61,10,100,106,73,117,77,67,49,104,98,109,57,117,101,87,49,118,100,88,77,61,10,100,106,73,117,77,65,61,61,10],
        "tag_name_offset":[18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,0,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615,9,18446744073709551615,30,18446744073709551615,18446744073709551615]
    },
    "timestamps":{
        "author_timestamp":[-9223372036854775808,-9223372036854775808,-9223372036854775808,1111144440,1234567890,-9223372036854775808,1111122220,-9223372036854775808,-9223372036854775808,-9223372036854775808,-9223372036854775808,-9223372036854775808,-9223372036854775808,-9223372036854775808,-9223372036854775808,-9223372036854775808,1111166660,-9223372036854775808,-9223372036854775808,-9223372036854775808,1111177770,-9223372036854775808,-9223372036854775808,-9223372036854775808],
        "author_timestamp_offset":[-32768,-32768,-32768,120,120,-32768,120,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,120,-32768,-32768,-32768,0,-32768,-32768,-32768],
        "committer_timestamp":[-9223372036854775808,-9223372036854775808,-9223372036854775808,1111155550,-9223372036854775808,-9223372036854775808,1111122220,-9223372036854775808,-9223372036854775808,-9223372036854775808,-9223372036854775808,-9223372036854775808,-9223372036854775808,-9223372036854775808,-9223372036854775808,-9223372036854775808,1111166660,-9223372036854775808,-9223372036854775808,-9223372036854775808,1111177770,-9223372036854775808,-9223372036854775808,-9223372036854775808],
        "committer_timestamp_offset":[-32768,-32768,-32768,120,-32768,-32768,120,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,120,-32768,-32768,-32768,0,-32768,-32768,-32768]
    },
    "arcs":[[[1,[43772814136]]],[[3,[40]],[4,[48]],[19,[56]]],[[5,[43772814136]]],[[6,[]],[12,[]]],[[3,[]]],[[3,[40]],[4,[48]]],[[7,[]]],[[11,[1]]],[],[[8,[33]],[10,[1]]],[],[],[[9,[66]],[11,[1]],[13,[33]]],[],[[12,[26]],[15,[1]]],[],[[3,[]],[14,[]]],[[18,[9]]],[],[[20,[]]],[[16,[]],[22,[]]],[[20,[]]],[[17,[18]],[23,[9]]],[]]
}
"""


@pytest.fixture(scope="session")
def graph_grpc_server_config(
    graph_grpc_backend_implementation, graph_statsd_server, tmpdir_factory
):
    full_graph_dir = DATASET_DIR / "compressed"

    json_graph_path = Path(tmpdir_factory.mktemp("json-graph")) / "graph.json"

    # FIXME: in order not to hardcode the large block of JSON above, we should do this:
    """
    rust_executable_dir = check_config({"debug": True})["rust_executable_dir"]
    subprocess.run(
        [
            f"{rust_executable_dir}/swh-graph-convert",
            "--input-format=webgraph",
            "--input", full_graph_dir / "example",
            "--output-format=json",
            "--output",
            json_graph_path
        ],
        check=True,
    )
    """
    # but swh-graph-convert does not yet support serializing properties
    json_graph_path.write_text(GRAPH_JSON)

    # make metadata files accessible too
    for extension in ("properties", "stats"):
        (json_graph_path.parent / f"graph.json.{extension}").symlink_to(
            full_graph_dir / f"example.{extension}"
        )
    (json_graph_path.parent / "meta").symlink_to(full_graph_dir / "meta")

    return {
        "graph": {
            "cls": f"local_{graph_grpc_backend_implementation}",
            "grpc_server": {
                "path": json_graph_path,
                "extra_options": ["--graph-format=json"],
                "debug": True,
                "statsd_host": graph_statsd_server.host,
                "statsd_port": graph_statsd_server.port,
            },
            "http_rpc_server": {"debug": True},
        }
    }
